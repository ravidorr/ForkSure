name: Release AAB on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  build-and-release-aab:
    # Only run when PR is actually merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: 🎉 PR Merged - Building Release AAB
      run: echo "🎉 PR #${{ github.event.pull_request.number }} merged! Building release AAB and creating GitHub release..."
      
    - name: Checkout merged code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0  # Fetch full history for version tagging
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "apiKey=${{ secrets.GEMINI_API_KEY }}" >> local.properties
      working-directory: ${{ github.workspace }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔢 Auto-bump version numbers
      id: bump_version
      run: |
        # Extract current versions
        CURRENT_VERSION_NAME=$(grep "versionName" app/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
        CURRENT_VERSION_CODE=$(grep "versionCode" app/build.gradle.kts | sed 's/.*= \(.*\)/\1/')
        
        echo "Current version: $CURRENT_VERSION_NAME (code: $CURRENT_VERSION_CODE)"
        
        # Increment version code
        NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
        
        # Auto-increment version name (patch version)
        # Extract major.minor.patch from version like "1.2.0-rc3"
        VERSION_BASE=$(echo $CURRENT_VERSION_NAME | sed 's/-.*$//')  # Remove suffix like "-rc3"
        VERSION_SUFFIX=$(echo $CURRENT_VERSION_NAME | sed 's/^[0-9]*\.[0-9]*\.[0-9]*\(.*\)$/\1/')  # Extract suffix
        
        MAJOR=$(echo $VERSION_BASE | cut -d. -f1)
        MINOR=$(echo $VERSION_BASE | cut -d. -f2)
        PATCH=$(echo $VERSION_BASE | cut -d. -f3)
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION_NAME="$MAJOR.$MINOR.$NEW_PATCH$VERSION_SUFFIX"
        
        echo "New version: $NEW_VERSION_NAME (code: $NEW_VERSION_CODE)"
        
        # Update build.gradle.kts
        sed -i "s/versionCode = $CURRENT_VERSION_CODE/versionCode = $NEW_VERSION_CODE/" app/build.gradle.kts
        sed -i "s/versionName = \"$CURRENT_VERSION_NAME\"/versionName = \"$NEW_VERSION_NAME\"/" app/build.gradle.kts
        
        # Set outputs
        echo "old_version_name=$CURRENT_VERSION_NAME" >> $GITHUB_OUTPUT
        echo "old_version_code=$CURRENT_VERSION_CODE" >> $GITHUB_OUTPUT
        echo "version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT
        echo "tag_name=v$NEW_VERSION_NAME-build$NEW_VERSION_CODE" >> $GITHUB_OUTPUT
        
    - name: 📝 Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/build.gradle.kts
        git commit -m "🔢 Auto-bump version to ${{ steps.bump_version.outputs.version_name }} (build ${{ steps.bump_version.outputs.version_code }})

        Triggered by PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
        Previous version: ${{ steps.bump_version.outputs.old_version_name }} (build ${{ steps.bump_version.outputs.old_version_code }})"
        
    - name: 🚀 Push version bump to main
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        
    - name: 🏗️ Build release AAB
      run: ./gradlew bundleRelease
      
    - name: 🏗️ Build release APK (for testing)
      run: ./gradlew assembleRelease
      
    - name: 📦 Prepare release assets
      run: |
        mkdir -p release-assets
        cp app/build/outputs/bundle/release/*.aab release-assets/
        cp app/build/outputs/apk/release/*.apk release-assets/
        
        # Create checksums
        cd release-assets
        sha256sum *.aab > checksums.txt
        sha256sum *.apk >> checksums.txt
        cd ..
        
    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.tag_name }}
        release_name: "ForkSure ${{ steps.bump_version.outputs.version_name }} (Build ${{ steps.bump_version.outputs.version_code }})"
        body: |
          ## 🎉 ForkSure Release ${{ steps.bump_version.outputs.version_name }}
          
          **Build**: ${{ steps.bump_version.outputs.version_code }}
          **Triggered by**: PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          **Branch**: ${{ github.event.pull_request.head.ref }} → main
          **Commit**: ${{ github.sha }}
          **Previous Version**: ${{ steps.bump_version.outputs.old_version_name }} (build ${{ steps.bump_version.outputs.old_version_code }})
          
          ### 📦 Release Assets
          - **Android App Bundle (AAB)**: Ready for Google Play Console upload
          - **APK**: For testing and sideloading
          - **Checksums**: SHA256 verification file
          
          ### 🚀 Installation
          1. **Google Play Store**: Upload the AAB file to Google Play Console
          2. **Direct Install**: Download and install the APK file
          
          ### ✅ What's New
          ${{ github.event.pull_request.body }}
          
        draft: false
        prerelease: false
        
    - name: 📎 Upload AAB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/app-release.aab
        asset_name: forksure-${{ steps.bump_version.outputs.version_name }}-release.aab
        asset_content_type: application/octet-stream
        
    - name: 📎 Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/app-release.apk
        asset_name: forksure-${{ steps.bump_version.outputs.version_name }}-release.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: 📎 Upload Checksums to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-assets/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
        
    - name: 📋 Release Summary
      run: |
        echo "## 🎉 GitHub Release Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release**: [${{ steps.bump_version.outputs.tag_name }}](${{ steps.create_release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ steps.bump_version.outputs.version_name }} (Build ${{ steps.bump_version.outputs.version_code }})" >> $GITHUB_STEP_SUMMARY
        echo "**PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 **AAB**: \`forksure-${{ steps.bump_version.outputs.version_name }}-release.aab\`" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 **APK**: \`forksure-${{ steps.bump_version.outputs.version_name }}-release.apk\`" >> $GITHUB_STEP_SUMMARY
        echo "- 🔐 **Checksums**: \`checksums.txt\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for Google Play Console upload!**" >> $GITHUB_STEP_SUMMARY 