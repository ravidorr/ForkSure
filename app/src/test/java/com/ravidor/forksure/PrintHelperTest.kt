package com.ravidor.forksure

import org.junit.Test
import com.google.common.truth.Truth.assertThat

/**
 * Unit tests for PrintHelper utility class
 * Tests markdown to HTML conversion, recipe title extraction, and core functionality
 */
class PrintHelperTest {

    @Test
    fun `extractRecipeTitle should extract title from markdown heading`() {
        // Given
        val markdownContent = """
            # Chocolate Chip Cookies
            
            ## Ingredients
            - 2 cups flour
            - 1 cup sugar
        """.trimIndent()

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).isEqualTo("Chocolate Chip Cookies")
    }

    @Test
    fun `extractRecipeTitle should extract title from bold text`() {
        // Given
        val markdownContent = """
            **Vanilla Cupcakes**
            
            These are delicious cupcakes with vanilla flavor.
        """.trimIndent()

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).isEqualTo("Vanilla Cupcakes")
    }

    @Test
    fun `extractRecipeTitle should use first line when no heading found`() {
        // Given
        val markdownContent = """
            Simple Banana Bread Recipe
            
            This is a simple recipe for banana bread.
        """.trimIndent()

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).isEqualTo("Simple Banana Bread Recipe")
    }

    @Test
    fun `extractRecipeTitle should return default when content is empty`() {
        // Given
        val markdownContent = ""

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).isEqualTo("Recipe")
    }

    @Test
    fun `extractRecipeTitle should limit title length to 50 characters`() {
        // Given
        val markdownContent = "# This is a very long recipe title that exceeds fifty characters and should be truncated"

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).hasLength(50)
        assertThat(title).startsWith("This is a very long recipe title that exceeds fif")
    }

    @Test
    fun `extractRecipeTitle should clean up markdown formatting`() {
        // Given
        val markdownContent = "## **Delicious *Chocolate* Cake**"

        // When
        val title = PrintHelper.extractRecipeTitle(markdownContent)

        // Then
        assertThat(title).isEqualTo("Delicious Chocolate Cake")
    }

    @Test
    fun `convertRecipeToHtml should convert basic markdown to HTML`() {
        // Given
        val markdownContent = """
            # Recipe Title
            
            ## Ingredients
            - 2 cups flour
            - 1 cup sugar
        """.trimIndent()

        // When
        val htmlContent = PrintHelper.convertRecipeToHtml(markdownContent, "Test Recipe")

        // Then
        assertThat(htmlContent).contains("Recipe Title")
        assertThat(htmlContent).contains("Ingredients")
        assertThat(htmlContent).contains("2 cups flour")
        assertThat(htmlContent).contains("1 cup sugar")
        assertThat(htmlContent).contains("Test Recipe")
        assertThat(htmlContent).contains("Generated by ForkSure")
    }

    @Test
    fun `convertRecipeToHtml should handle bold and italic text`() {
        // Given
        val markdownContent = "**Bold text** and *italic text*"

        // When
        val htmlContent = PrintHelper.convertRecipeToHtml(markdownContent, "Test Recipe")

        // Then
        assertThat(htmlContent).contains("Bold text")
        assertThat(htmlContent).contains("italic text")
    }

    @Test
    fun `convertRecipeToHtml should include proper HTML structure`() {
        // Given
        val markdownContent = "Simple recipe content"

        // When
        val htmlContent = PrintHelper.convertRecipeToHtml(markdownContent, "Test Recipe")

        // Then
        assertThat(htmlContent).contains("<!DOCTYPE html>")
        assertThat(htmlContent).contains("<html>")
        assertThat(htmlContent).contains("<head>")
        assertThat(htmlContent).contains("<body>")
        assertThat(htmlContent).contains("</html>")
        assertThat(htmlContent).contains("<title>Test Recipe</title>")
    }

    @Test
    fun `convertRecipeToHtml should include CSS styling`() {
        // Given
        val markdownContent = "Recipe content"

        // When
        val htmlContent = PrintHelper.convertRecipeToHtml(markdownContent, "Test Recipe")

        // Then
        assertThat(htmlContent).contains("<style>")
        assertThat(htmlContent).contains("font-family: 'Times New Roman'")
        assertThat(htmlContent).contains("@media print")
        assertThat(htmlContent).contains("margin: 0.5in")
    }

    @Test
    fun `convertRecipeToHtml should include header and footer`() {
        // Given
        val markdownContent = "Recipe content"

        // When
        val htmlContent = PrintHelper.convertRecipeToHtml(markdownContent, "Test Recipe")

        // Then
        assertThat(htmlContent).contains("class=\"header\"")
        assertThat(htmlContent).contains("class=\"footer\"")
        assertThat(htmlContent).contains("Generated by ForkSure - AI-Powered Recipe Assistant")
        assertThat(htmlContent).contains("ForkSure App - Bake with Confidence")
        assertThat(htmlContent).contains("Printed on")
    }

    @Test
    fun `generateJobName should create unique job names`() {
        // Given
        val recipeName1 = "Chocolate Cake"
        val recipeName2 = "Vanilla Cookies"

        // When
        val jobName1 = PrintHelper.generateJobName(recipeName1)
        val jobName2 = PrintHelper.generateJobName(recipeName2)

        // Then
        assertThat(jobName1).startsWith("ForkSure_Chocolate Cake_")
        assertThat(jobName2).startsWith("ForkSure_Vanilla Cookies_")
        assertThat(jobName1).isNotEqualTo(jobName2)
    }

    @Test
    fun `generateJobName should clean special characters`() {
        // Given
        val recipeName = "Recipe with @#$% special chars!"

        // When
        val jobName = PrintHelper.generateJobName(recipeName)

        // Then
        assertThat(jobName).startsWith("ForkSure_")
        assertThat(jobName).contains("Recipe with")
        assertThat(jobName).doesNotContain("@")
        assertThat(jobName).doesNotContain("#")
        assertThat(jobName).doesNotContain("$")
        assertThat(jobName).doesNotContain("%")
        assertThat(jobName).doesNotContain("!")
    }

    @Test
    fun `generateJobName should limit name length`() {
        // Given
        val longRecipeName = "This is a very long recipe name that should be truncated to twenty characters maximum"

        // When
        val jobName = PrintHelper.generateJobName(longRecipeName)

        // Then
        assertThat(jobName).startsWith("ForkSure_")
        assertThat(jobName).contains("This is a very long")
        // The name should be truncated but still contain the beginning
    }

    // Note: Context-dependent tests (isPrintingAvailable, printRecipe) are tested in integration tests
    // since they require Android framework components that are difficult to mock in unit tests
} 